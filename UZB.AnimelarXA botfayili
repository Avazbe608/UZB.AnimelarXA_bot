python-telegram-bot==20.3
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# --- CONFIG ---
BOT_TOKEN = os.getenv("BOT_TOKEN")  # Koyeb deploy uchun environment variable
DATA_FILE = "anime_db.json"

# --- Yordamchi funksiyalar ---
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- Bot buyruqlari ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Salom! Anime botga xush kelibsiz.\n"
        "/addanime - Yangi anime qo‘shish\n"
        "/anime - Animelarni ko‘rish"
    )

async def add_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Anime qo‘shish formatida yozing:\n"
        "`Title | Description | image_url | video1_url,video2_url,...`\n"
        "Masalan:\n"
        "Naruto | Yosh ninja sarguzashtlari | https://linktoimage.com/img.jpg | https://linktovideo.com/1.mp4,https://linktovideo.com/2.mp4",
        parse_mode="Markdown"
    )

async def receive_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "|" not in text:
        await update.message.reply_text("Format noto‘g‘ri, qayta urinib ko‘ring.")
        return
    try:
        title, description, image_url, videos_str = map(str.strip, text.split("|"))
        videos = [v.strip() for v in videos_str.split(",")]
        data = load_data()
        data[title] = {
            "description": description,
            "image": image_url,
            "episodes": {str(i+1): videos[i] for i in range(len(videos))}
        }
        save_data(data)
        await update.message.reply_text(f"{title} anime muvaffaqiyatli qo‘shildi ✅")
    except Exception as e:
        await update.message.reply_text(f"Xatolik: {e}")

async def anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text("Hozircha anime mavjud emas.")
        return
    keyboard = []
    for title in data:
        keyboard.append([InlineKeyboardButton(title, callback_data=f"show_{title}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Anime tanlang:", reply_markup=reply_markup)

# --- Callback handler ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    db = load_data()

    if data.startswith("show_"):
        title = data[5:]
        anime = db.get(title)
        if anime:
            keyboard = []
            for ep_num in anime["episodes"]:
                keyboard.append([InlineKeyboardButton(f"Episode {ep_num}", callback_data=f"ep_{title}_{ep_num}")])
            keyboard.append([InlineKeyboardButton("Yuklab olish", url=anime["episodes"]["1"])])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_photo(
                photo=anime["image"],
                caption=f"{title}\n\n{anime['description']}",
                reply_markup=reply_markup
            )
    elif data.startswith("ep_"):
        _, title, ep_num = data.split("_")
        anime = db.get(title)
        if anime and ep_num in anime["episodes"]:
            await query.message.reply_video(video=anime["episodes"][ep_num])

# --- Main ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addanime", add_anime))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_anime))
    app.add_handler(CommandHandler("anime", anime))
    app.add_handler(CallbackQueryHandler(button))
    print("Bot ishga tushdi...")
    app.run_polling()
